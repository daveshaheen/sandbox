<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App</name>
    </assembly>
    <members>
        <member name="T:App.Controllers.BaseController">
            <summary>
                BaseContoller
                <para>An abstract base class for controllers to inherit from.</para>
            </summary>
            <remarks>Inherits from <see cref="T:Microsoft.AspNetCore.Mvc.Controller" /></remarks>
        </member>
        <member name="T:App.Controllers.Parking.ParkingRatesController">
            <summary>
                ParkingRatesController
                <para>Contains the methods to return a view of parking rates based on the accept header.</para>
            </summary>
            <remarks>Inherits from <see cref="T:App.Controllers.BaseController" /></remarks>
        </member>
        <member name="M:App.Controllers.Parking.ParkingRatesController.#ctor(App.Services.IParkingRateService)">
            <summary>
                ParkingRatesController constructor
            </summary>
            <param name="parkingRateService">Parking rate service.</param>
        </member>
        <member name="M:App.Controllers.Parking.ParkingRatesController.Get(System.String,System.String)">
            <summary>Get parking rates based on a start and end ISO 8601 date time formats.</summary>
            <param name="start">Required start date time in ISO 8601 format.</param>
            <param name="end">Required end date time in ISO 8601 format.</param>
            /// <returns>Returns an IActionResult. </returns>
            <response code="200">Response code of 200 returns the parking price. </response>
            <response code="400">Response code of 400 returns Bad Request with error messages if there are errors in the query. </response>
            <response code="404">Response code of 404 unavailable returns if there is no data available. </response>
        </member>
        <member name="T:App.Models.ParkingRateDataModel">
            <summary>Parking rate data model</summary>
        </member>
        <member name="P:App.Models.ParkingRateDataModel.Days">
            <summary>Gets or sets the Days property.</summary>
        </member>
        <member name="P:App.Models.ParkingRateDataModel.Price">
            <summary>Gets or sets the Price property.</summary>
        </member>
        <member name="P:App.Models.ParkingRateDataModel.StartTime">
            <summary>Gets or sets the start time.</summary>
        </member>
        <member name="P:App.Models.ParkingRateDataModel.EndTime">
            <summary>Gets or sets the end time.</summary>
        </member>
        <member name="T:App.Models.ParkingRatesDataModel">
            <summary>Parking rates data model.</summary>
        </member>
        <member name="P:App.Models.ParkingRatesDataModel.Rates">
            <summary>Gets or sets the rates.</summary>
        </member>
        <member name="T:App.Models.Response">
            <summary>Response</summary>
        </member>
        <member name="P:App.Models.Response.Errors">
            <summary>Gets or sets the errors, if there are any. Can be null.</summary>
        </member>
        <member name="P:App.Models.Response.Price">
            <summary>Gets or sets the parking rate price.</summary>
            <remarks>
                NOTE: I had thoughts of calling this property something generic like content which could be used to wrap whatever object was to be sent back to the client; then, add another property, Type, to describe the content type. I haven't had a chance to explore this idea yet, especially with using protocol buffers. Also, need to decide how to handle API versions. Maybe sticking Nginx in front of the API and let it route to different containers running different versions of API would be a good approach.
            </remarks>
        </member>
        <member name="T:App.Program">
            <summary>
                Program
                <para>
                    Provides the entry point for the Rates Web API application.
                </para>
                <para>
                    Currently there is only one route that can be can be accessed at: http://*::5000/api/{version}/parking/rates.{format}?start={start}&amp;end={end}.
                </para>
                <para>
                    The {version} can be anything right now. It's there so it's available incase of future updates.
                </para>
                <para>
                    The .{format?} is optional and can either be xml, json, proto, or left off.
                </para>
                <para>
                    The {start} and {end} must be on the same day and in ISO 8601 format. For example <c>start=2015-07-01T07:00:00Z</c> and <c>end=2015-07-01T12:00:00Z</c>.
                    The endpoint will either return a price as a 32 bit int, a bad request, or a 404 with the message unavailable.
                </para>
            </summary>
        </member>
        <member name="M:App.Program.Main(System.String[])">
            <summary>
                The Main method.
                <para>The main entry point for the Rates Web API application.</para>
            </summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="M:App.Program.BuildWebHost(System.String[])">
            <summary>
                BuildWebHost
                <para>
                    A static method to configure a web host.
                </para>
                <para>
                    The web host is configured to use the Kestrel web server and listen on any IPV4 and any IPV6 address on port 5000.
                    The listening address and port can be over written with environment variables prefixed with DOTNET_ or with command line parameters.
                </para>
                <para>
                    Environment variable usage: DOTNET_URLS=http://*:5000
                </para>
                <para>
                    Command line usage. dotnet run --urls http://*:5000
                </para>
                <para>
                    The maximum number of connections is unlimited (null) by default.
                    The default maximum request body size is 30,000,000 bytes, which is approximately 28.6MB.
                    The default minimum rate is 240 bytes/second, with a 5 second grace period.
                </para>
                <para>https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?tabs=aspnetcore2x</para>
            </summary>
            <param name="args">The command line arguments.</param>
            <returns>Returns <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost" />.</returns>
        </member>
        <member name="T:App.Repositories.IParkingRateRepository">
            <summary>
                IParkingRateRepository
                <para>Contains the contract information for the methods and properties needed to retrieve the data from the parking rate repository.</para>
            </summary>
        </member>
        <member name="M:App.Repositories.IParkingRateRepository.GetParkingRatesData(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>Gets the parking rates from the data repository.</summary>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>Returns the ParkingRatesDataModel</returns>
        </member>
        <member name="T:App.Repositories.ParkingRateRepository">
            <summary>
                ParkingRateRepository
                <para>Contains implementations for the methods and properties needed to retrieve the data from the parking rate repository.</para>
            </summary>
            <remarks>Implements <see cref="T:App.Repositories.IParkingRateRepository"/></remarks>
        </member>
        <member name="M:App.Repositories.ParkingRateRepository.#ctor(System.String)">
            <summary>Parking rate repository constructor.</summary>
            <param name="json">The json data.</param>
        </member>
        <member name="M:App.Repositories.ParkingRateRepository.GetParkingRatesData(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>
                Gets the parking rates from the data repository.
            </summary>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <returns>Returns the ParkingRatesDataModel</returns>
        </member>
        <member name="T:App.Services.IParkingRateService">
            <summary>
                IParkingRateService
                <para>Parking rate service interface.</para>
            </summary>
        </member>
        <member name="M:App.Services.IParkingRateService.GetPrice(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>
                GetPrice
                <para>Gets the price based on the day of the week and the start and end timespans.</para>
            </summary>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="start">The start date time offset.</param>
            <param name="end">The end date time offset.</param>
            <returns>Returns the price.</returns>
        </member>
        <member name="T:App.Services.ParkingRateService">
            <summary>
                ParkingRateService
                <para>Parking rate service implementation.</para>
            </summary>
        </member>
        <member name="M:App.Services.ParkingRateService.#ctor(App.Repositories.IParkingRateRepository)">
            <summary>ParkingRateService constructor.</summary>
            <param name="parkingRateRepository">Parking rate repository.</param>
        </member>
        <member name="M:App.Services.ParkingRateService.GetPrice(System.DayOfWeek,System.TimeSpan,System.TimeSpan)">
            <summary>
                GetPrice
                <para>Gets the price based on the day of the week and the start and end timespans.</para>
            </summary>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="start">The start date time offset.</param>
            <param name="end">The end date time offset.</param>
            <returns>Returns the price.</returns>
        </member>
        <member name="T:App.Startup">
            <summary>
                Startup
                <para>Contains the startup methods for the application.</para>
            </summary>
        </member>
        <member name="M:App.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Startup constructor
            </summary>
            <param name="configuration">An application configuration.</param>
        </member>
        <member name="P:App.Startup.Configuration">
            <summary>
                Gets the Configuration property.
            </summary>
            <value>An application configuration.</value>
        </member>
        <member name="M:App.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                ConfigureServices
                <para>This method gets called by the runtime. Use this method to add services to the container.</para>
            </summary>
            <param name="services">A collection of services.</param>
        </member>
        <member name="M:App.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
                The Configure method.
                <para>This method gets called by the runtime. Use this method to configure the HTTP request pipeline.</para>
            </summary>
            <param name="app">The application to configure.</param>
            <param name="env">Information about the hosting environment.</param>
        </member>
        <member name="T:App.Utility.DateTimeFormatUtility">
            <summary>DateTime format utility class</summary>
        </member>
        <member name="F:App.Utility.DateTimeFormatUtility.ISO8601AcceptedFormats">
            <summary>Accepted ISO 8601 formats.</summary>
        </member>
    </members>
</doc>
